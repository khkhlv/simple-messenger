stages:
  - build
  - test
  - sonar-check
  - quality-check

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  SONAR_PROJECT_KEY: "DeepPK_messenger"
  MAX_ATTEMPTS: "10"

cache:
  key: maven
  paths:
    - .m2/repository

build:
  image: maven:3.8.6-openjdk-18
  stage: build
  tags:
    - messenger
  script:
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 day

test:
  image: maven:3.8.6-openjdk-18
  stage: test
  tags:
    - messenger
  script:
    - mvn $MAVEN_CLI_OPTS test
    - mvn test jacoco:report
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml
    reports:
      junit: target/surefire-reports/*.xml

sonar-check:
  image: maven:3-openjdk-18
  stage: sonar-check
  tags:
    - messenger
  script:
    - mvn clean install
    - mvn sonar:sonar
      -Dsonar.tests=src/test/java/ru/khkhlv
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.qualitygate.wait=true
  dependencies:
    - test

check-metrics:
  image: praqma/network-multitool:latest
  stage: quality-check
  tags:
    - messenger
  script:
    - sleep 30
    - |
      ATTEMPT=0
      MAX_ATTEMPTS=${MAX_ATTEMPTS:-10}
      PROJECT_KEY="$SONAR_PROJECT_KEY"

      while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
        STATUS=$(curl -s -u "$SONAR_TOKEN": "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r '.projectStatus.status')
      
        if [ "$STATUS" = "OK" ]; then
          echo "Quality Gate passed"
          break
        elif [ "$STATUS" = "ERROR" ]; then
          echo "Quality Gate failed"
          exit 1
        fi

        sleep 30
        ATTEMPT=$((ATTEMPT+1))
      done

      if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
        echo "Timeout waiting for Quality Gate"
        exit 1
      fi

      COVERAGE=$(curl -s -u "$SONAR_TOKEN": "$SONAR_HOST_URL/api/measures/component?component=$PROJECT_KEY&metricKeys=coverage" | jq -r '.component.measures[0].value')
      if [ "$COVERAGE" = "null" ]; then
        echo "Coverage data unavailable"
        exit 1
      elif [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
        echo "Code coverage $COVERAGE% < 80%"
        exit 1
      fi

      CRITICAL_ISSUES=$(curl -s -u "$SONAR_TOKEN": "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_KEY&severities=CRITICAL" | jq -r '.total')
      if [ "$CRITICAL_ISSUES" -gt 0 ]; then
        echo "Found $CRITICAL_ISSUES critical issues"
        exit 1
      fi
